plugins {
    id("com.android.library")
    id("kotlin-android")
    id("kotlin-android-extensions")
    id 'org.jetbrains.dokka' version '0.9.18'
}

android {
    compileSdkVersion compileSdk
    defaultConfig {
        minSdkVersion minSdk
        targetSdkVersion targetSdk
        versionCode versionProductionCode
        versionName versionProductionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':support-ext')

    /** Koin AndroidX Dependency Injection */
    implementation "org.koin:koin-core:$koin"
    implementation "org.koin:koin-core-ext:$koin"

    /** Kotlin Libraries */
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesCore"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesAndroid"

    /** Architecture Components */
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleX"
    implementation "androidx.room:room-ktx:$room"
    implementation "androidx.room:room-runtime:$room"
    implementation "androidx.work:work-runtime-ktx:$workerKtx"
    implementation "androidx.paging:paging-runtime-ktx:$pagingKtx"
    implementation "androidx.paging:paging-runtime:$paging"

    /** Retrofit Libraries */
    implementation "com.squareup.retrofit2:retrofit:$retrofit"

    /** Timber */
    implementation "com.jakewharton.timber:timber:$timber"

    /** Testing-only dependencies */
    testImplementation "junit:junit:$junit"
    testImplementation "io.mockk:mockk:$mockk"
    androidTestImplementation "androidx.test:runner:$runner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso"
}

dokka {
    moduleName = 'data'
    outputFormat = 'kotlin-website'
    outputDirectory = "$buildDir/javadoc"

    linkMapping {
        dir = "src/main/java"
        url = "https://github.com/AniTrend/support-app/tree/experimental/paging/support-data/src/main/java"
        suffix = "#L"
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task classesJar(type: Jar) {
    from "$buildDir/intermediates/classes/release"
}

artifacts {
    archives classesJar
    archives javadocJar
    archives sourcesJar
}